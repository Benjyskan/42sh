!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARROW_LEN	libterm/includes/libterm.h	/^# define ARROW_LEN /;"	d
AST_H	includes/ast.h	/^# define AST_H$/;"	d
BACKSPACE	libterm/includes/libterm.h	/^# define BACKSPACE /;"	d
BACKSPACE_LEN	libterm/includes/libterm.h	/^# define BACKSPACE_LEN /;"	d
BASE_16_LOW	libft/includes/ft_printf.h	/^# define BASE_16_LOW /;"	d
BASE_16_UP	libft/includes/ft_printf.h	/^# define BASE_16_UP /;"	d
BASE_8	libft/includes/ft_printf.h	/^# define BASE_8 /;"	d
BEGIN_LINE	libterm/includes/cursor.h	/^# define BEGIN_LINE /;"	d
BELL	libterm/includes/libterm.h	/^# define BELL /;"	d
BELL_LEN	libterm/includes/libterm.h	/^# define BELL_LEN /;"	d
BG_BLACK	libft/includes/ft_printf.h	/^# define BG_BLACK /;"	d
BG_BLUE	libft/includes/ft_printf.h	/^# define BG_BLUE /;"	d
BG_CYAN	libft/includes/ft_printf.h	/^# define BG_CYAN /;"	d
BG_DFL	libft/includes/ft_printf.h	/^# define BG_DFL /;"	d
BG_GREEN	libft/includes/ft_printf.h	/^# define BG_GREEN /;"	d
BG_MAGENTA	libft/includes/ft_printf.h	/^# define BG_MAGENTA /;"	d
BG_RED	libft/includes/ft_printf.h	/^# define BG_RED /;"	d
BG_WHITE	libft/includes/ft_printf.h	/^# define BG_WHITE /;"	d
BG_YELLOW	libft/includes/ft_printf.h	/^# define BG_YELLOW /;"	d
BLACK	libft/includes/ft_printf.h	/^# define BLACK /;"	d
BLUE	libft/includes/ft_printf.h	/^# define BLUE /;"	d
BOLD	libft/includes/ft_printf.h	/^# define BOLD /;"	d
BOLD_OFF	libft/includes/ft_printf.h	/^# define BOLD_OFF /;"	d
BUF_SIZE	includes/line_editing.h	/^# define BUF_SIZE /;"	d
CC	Makefile	/^CC		:=	gcc$/;"	m
CC	libft/Makefile	/^CC		:=	gcc$/;"	m
CC	libterm/Makefile	/^CC		:=	gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS	:=	-Wall -Wextra -Werror$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS	:=	-Wall -Wextra -Werror$/;"	m
CFLAGS	libterm/Makefile	/^CFLAGS	:=	-Wall -Wextra -Werror$/;"	m
CLEAR	libterm/includes/cursor.h	/^# define CLEAR /;"	d
CLEAR_BELOW	libterm/includes/cursor.h	/^# define CLEAR_BELOW /;"	d
COLOR_SIZE	libft/includes/ft_printf.h	/^# define COLOR_SIZE /;"	d
CONTROL_SIZE	libft/includes/ft_printf.h	/^# define CONTROL_SIZE /;"	d
CONVERSION_DIR	libft/Makefile	/^	CONVERSION_DIR		:= conversion$/;"	m
CONVERSION_FILES	libft/Makefile	/^	CONVERSION_FILES	:=	conv_helper.c converters.c$/;"	m
CONVERSION_PATH	libft/Makefile	/^CONVERSION_PATH		:=	$(addprefix $(CONVERSION_DIR)\/,$(CONVERSION_FILES))$/;"	m
CTRL_C	libterm/includes/libterm.h	/^# define CTRL_C /;"	d
CTRL_C_LEN	libterm/includes/libterm.h	/^# define CTRL_C_LEN /;"	d
CTRL_D	libterm/includes/libterm.h	/^# define CTRL_D /;"	d
CTRL_Z	libterm/includes/libterm.h	/^# define CTRL_Z /;"	d
CTRL_Z_LEN	libterm/includes/libterm.h	/^# define CTRL_Z_LEN /;"	d
CURSOR_H	libterm/includes/cursor.h	/^# define CURSOR_H$/;"	d
CYAN	libft/includes/ft_printf.h	/^# define CYAN /;"	d
C_FILES	Makefile	/^C_FILES	:=	$(SRC_FILES) $(ENV_FILES) $(ERRORS_FILES) $(LEXER_FILES)\\$/;"	m
C_FILES	libft/Makefile	/^C_FILES	:=	$(SRC_FILES) $(STD_FUNC_FILES) $(CONVERSION_FILES) $(FORMATS_FILES)		\\$/;"	m
C_FILES	libterm/Makefile	/^C_FILES	:=	$(SRC_FILES) $(ERRORS_FILES)$/;"	m
Close	srcs/pipeline/parse_pipeline.c	/^static void	Close(int fd)$/;"	f	file:
DEBUG_FLAG	Makefile	/^DEBUG_FLAG	:=	-g$/;"	m
DEBUG_FLAG	libft/Makefile	/^DEBUG_FLAG	:=	-g$/;"	m
DEBUG_FLAG	libterm/Makefile	/^DEBUG_FLAG	:=	-g$/;"	m
DEL	libterm/includes/libterm.h	/^# define DEL /;"	d
DEL_LEN	libterm/includes/libterm.h	/^# define DEL_LEN /;"	d
DOWNARROW	libterm/includes/libterm.h	/^# define DOWNARROW /;"	d
END	libterm/includes/libterm.h	/^# define END /;"	d
ENDL	includes/get_next_line.h	/^# define ENDL /;"	d
END_LEN	libterm/includes/libterm.h	/^# define END_LEN /;"	d
ENTER	libterm/includes/libterm.h	/^# define ENTER /;"	d
ENTER_LEN	libterm/includes/libterm.h	/^# define ENTER_LEN /;"	d
ENV_DIR	Makefile	/^	ENV_DIR				:=	environment$/;"	m
ENV_FILES	Makefile	/^	ENV_FILES		:=	environ_set.c environ_utils.c init_env.c shlvl.c$/;"	m
ENV_PATH	Makefile	/^ENV_PATH			:=	$(addprefix $(ENV_DIR)\/,$(ENV_FILES))$/;"	m
ERASE_ENDLINE	libterm/includes/cursor.h	/^# define ERASE_ENDLINE /;"	d
ERRORS_DIR	Makefile	/^	ERRORS_DIR			:=	errors$/;"	m
ERRORS_DIR	libterm/Makefile	/^	ERRORS_DIR		:=	errors$/;"	m
ERRORS_FILES	Makefile	/^	ERRORS_FILES	:=	errors.c$/;"	m
ERRORS_FILES	libterm/Makefile	/^	ERRORS_FILES	:=	error_attr.c error_caps.c error_getenv.c \\$/;"	m
ERRORS_PATH	Makefile	/^ERRORS_PATH			:=	$(addprefix $(ERRORS_DIR)\/,$(ERRORS_FILES))$/;"	m
ERRORS_PATH	libterm/Makefile	/^ERRORS_PATH		:=	$(addprefix $(ERRORS_DIR)\/,$(ERRORS_FILES))$/;"	m
ERROR_MEM	includes/lexer.h	/^# define ERROR_MEM /;"	d
ERROR_READ	includes/tosh.h	/^# define ERROR_READ /;"	d
ESC	libterm/includes/libterm.h	/^# define ESC /;"	d
ESCAPE	libterm/includes/libterm.h	/^# define ESCAPE /;"	d
ESCAPE_LEN	libterm/includes/libterm.h	/^# define ESCAPE_LEN /;"	d
EXPANDS_DIR	Makefile	/^	EXPANDS_DIR			:=	expands$/;"	m
EXPANDS_FILES	Makefile	/^	EXPANDS_FILES	:=	parse_expands.c parse_dollars.c parse_tildes.c \\$/;"	m
EXPANDS_PATH	Makefile	/^EXPANDS_PATH		:=	$(addprefix $(EXPANDS_DIR)\/,$(EXPANDS_FILES))$/;"	m
FD_LIMITS	includes/tosh.h	/^# define FD_LIMITS /;"	d
FG_DFL	libft/includes/ft_printf.h	/^# define FG_DFL /;"	d
FORMATS_DIR	libft/Makefile	/^	FORMATS_DIR			:= formats$/;"	m
FORMATS_FILES	libft/Makefile	/^	FORMATS_FILES		:=	format_int.c format_char.c format_unsigned.c		\\$/;"	m
FORMATS_PATH	libft/Makefile	/^FORMATS_PATH		:=	$(addprefix $(FORMATS_DIR)\/,$(FORMATS_FILES))$/;"	m
FSA_FLAGS	Makefile	/^FSA_FLAGS	:=	$(DEBUG_FLAG) -fsanitize=address$/;"	m
FSA_FLAGS	libft/Makefile	/^FSA_FLAGS	:=	$(DEBUG_FLAG) -fsanitize=address$/;"	m
FSA_FLAGS	libterm/Makefile	/^FSA_FLAGS	:=	$(DEBUG_FLAG) -fsanitize=address$/;"	m
FT_ITOA_DIR	libft/Makefile	/^	FT_ITOA_DIR			:= ft_itoa$/;"	m
FT_ITOA_FILES	libft/Makefile	/^	FT_ITOA_FILES		:=	ft_nitoa.c ft_litoa.c ft_llitoa.c ft_hitoa.c		\\$/;"	m
FT_ITOA_PATH	libft/Makefile	/^FT_ITOA_PATH		:=	$(addprefix $(FT_ITOA_DIR)\/,$(FT_ITOA_FILES))$/;"	m
FT_PRINTF_H	libft/includes/ft_printf.h	/^# define FT_PRINTF_H$/;"	d
GET_LEN_DIR	libft/Makefile	/^	GET_LEN_DIR			:= get_len$/;"	m
GET_LEN_FILES	libft/Makefile	/^	GET_LEN_FILES		:=	get_len.c get_ulen.c$/;"	m
GET_LEN_PATH	libft/Makefile	/^GET_LEN_PATH		:=	$(addprefix $(GET_LEN_DIR)\/,$(GET_LEN_FILES))$/;"	m
GET_NEXT_LINE_H	includes/get_next_line.h	/^# define GET_NEXT_LINE_H$/;"	d
GET_POS	libterm/includes/cursor.h	/^# define GET_POS /;"	d
GNL_BUFF_SIZE	includes/get_next_line.h	/^# define GNL_BUFF_SIZE /;"	d
GREEN	libft/includes/ft_printf.h	/^# define GREEN /;"	d
HELPERS_DIR	libft/Makefile	/^	HELPERS_DIR			:= helpers$/;"	m
HELPERS_FILES	libft/Makefile	/^	HELPERS_FILES		:=	ft_atoi_move.c null_data.c ft_special_memset.c		\\$/;"	m
HELPERS_PATH	libft/Makefile	/^HELPERS_PATH		:=	$(addprefix $(HELPERS_DIR)\/,$(HELPERS_FILES))$/;"	m
HIGHLIGHT	libterm/includes/cursor.h	/^# define HIGHLIGHT /;"	d
HISTORY_DIR	Makefile	/^	HISTORY_DIR			:=	history$/;"	m
HISTORY_FILES	Makefile	/^	HISTORY_FILES	:=	hist_file.c get_next_line.c hist_lst.c switch_history.c$/;"	m
HISTORY_H	includes/history.h	/^# define HISTORY_H$/;"	d
HISTORY_PATH	Makefile	/^HISTORY_PATH		:=	$(addprefix $(HISTORY_DIR)\/,$(HISTORY_FILES))$/;"	m
HIST_FILE	includes/history.h	/^# define HIST_FILE /;"	d
HIST_MAX	includes/history.h	/^# define HIST_MAX /;"	d
HIST_SIZE	includes/history.h	/^# define HIST_SIZE /;"	d
HOME	libterm/includes/libterm.h	/^# define HOME /;"	d
HOME_LEN	libterm/includes/libterm.h	/^# define HOME_LEN /;"	d
INCLS	Makefile	/^INCLS		:=	$(addprefix includes\/,$(INCL_FILES))$/;"	m
INCLS	libft/Makefile	/^INCLS		:=	$(addprefix includes\/,$(INCL_FILES))$/;"	m
INCLS	libterm/Makefile	/^INCLS		:=	$(addprefix includes\/,$(INCL_FILES))$/;"	m
INCL_CMD	Makefile	/^INCL_CMD	:=	$(addprefix -I,$(INCL_DIR))$/;"	m
INCL_CMD	libft/Makefile	/^INCL_CMD	:=	$(addprefix -I,$(INCL_DIRS))$/;"	m
INCL_CMD	libterm/Makefile	/^INCL_CMD	:=	$(addprefix -I,$(INCL_DIR))$/;"	m
INCL_DIR	Makefile	/^INCL_DIR	:=	includes libft\/includes libterm\/includes$/;"	m
INCL_DIR	libterm/Makefile	/^INCL_DIR	:=	includes $(LIBFT_DIR)\/includes$/;"	m
INCL_DIRS	libft/Makefile	/^INCL_DIRS	:=	includes$/;"	m
INCL_FILES	Makefile	/^INCL_FILES	:=	tosh.h lexer.h ast.h reader.h history.h get_next_line.h line_editing.h$/;"	m
INCL_FILES	libft/Makefile	/^INCL_FILES	:=	libft.h ft_printf.h$/;"	m
INCL_FILES	libterm/Makefile	/^INCL_FILES	:=	libterm.h cursor.h$/;"	m
INCREMENTERS_DIR	libft/Makefile	/^	INCREMENTERS_DIR	:= incrementers$/;"	m
INCREMENTERS_FILES	libft/Makefile	/^	INCREMENTERS_FILES	:=	increm_format.c increm_string.c $/;"	m
INCREMENTERS_PATH	libft/Makefile	/^INCREMENTERS_PATH	:=	$(addprefix $(INCREMENTERS_DIR)\/,$(INCREMENTERS_FILES))$/;"	m
INIT_LEN	libft/includes/ft_printf.h	/^# define INIT_LEN /;"	d
INIT_TXT_SIZE	includes/line_editing.h	/^# define INIT_TXT_SIZE /;"	d
INVISIBLE	libterm/includes/cursor.h	/^# define INVISIBLE /;"	d
L	libft/includes/ft_printf.h	/^# define L /;"	d
LEFTARROW	libterm/includes/libterm.h	/^# define LEFTARROW /;"	d
LEFT_CORNER	libterm/includes/cursor.h	/^# define LEFT_CORNER /;"	d
LEXER_DIR	Makefile	/^	LEXER_DIR			:=	lexer$/;"	m
LEXER_FILES	Makefile	/^	LEXER_FILES		:=	lexer.c lexer_tools.c lexer_op_chart.c get_token.c\\$/;"	m
LEXER_H	includes/lexer.h	/^# define LEXER_H$/;"	d
LEXER_PATH	Makefile	/^LEXER_PATH			:=	$(addprefix $(LEXER_DIR)\/,$(LEXER_FILES))$/;"	m
LEX_CONT_READ	includes/lexer.h	/^	LEX_CONT_READ$/;"	e	enum:s_lexer_state
LEX_FAIL	includes/lexer.h	/^	LEX_FAIL,$/;"	e	enum:s_lexer_state
LEX_SUCCESS	includes/lexer.h	/^	LEX_SUCCESS,$/;"	e	enum:s_lexer_state
LIBFT_A	Makefile	/^LIBFT_A			:=	$(addprefix $(LIBFT_DIR)\/,libft.a)$/;"	m
LIBFT_A	libft/Makefile	/^LIBFT_A		:=	$/;"	m
LIBFT_A	libterm/Makefile	/^LIBFT_A		:=	$(LIBFT_DIR)\/libft.a$/;"	m
LIBFT_DIR	Makefile	/^LIBFT_DIR		:=	libft$/;"	m
LIBFT_DIR	libterm/Makefile	/^LIBFT_DIR	:= ..\/libft$/;"	m
LIBFT_H	libft/includes/libft.h	/^# define LIBFT_H$/;"	d
LIBS	Makefile	/^LIBS			:= $(LIBFT_A) $(LIBTERM_A)$/;"	m
LIBS	libft/Makefile	/^LIBS		:= $/;"	m
LIBS	libterm/Makefile	/^LIBS		:= $(LIBFT_A)$/;"	m
LIBTERM_A	Makefile	/^LIBTERM_A		:=	$(addprefix $(LIBTERM_DIR)\/,libterm.a)$/;"	m
LIBTERM_A	libft/Makefile	/^LIBTERM_A	:=	$/;"	m
LIBTERM_DIR	Makefile	/^LIBTERM_DIR		:=	libterm$/;"	m
LIBTERM_H	libterm/includes/libterm.h	/^# define LIBTERM_H$/;"	d
LIB_INCL	Makefile	/^LIB_INCL		:=	-L $(LIBFT_DIR) -lft -L $(LIBTERM_DIR) -lterm -ltermcap$/;"	m
LIB_INCL	libft/Makefile	/^LIB_INCL	:=	$/;"	m
LIB_INCL	libterm/Makefile	/^LIB_INCL	:=	-L $(LIBFT_DIR) -lft -ltermcap$/;"	m
LINE_EDITING_H	includes/line_editing.h	/^# define LINE_EDITING_H$/;"	d
LL	libft/includes/ft_printf.h	/^# define LL /;"	d
L_E_DIR	Makefile	/^	L_E_DIR				:=	line_editing$/;"	m
L_E_FILES	Makefile	/^	L_E_FILES		:=	st_cmd.c st_prompt.c st_txt.c writing.c$/;"	m
L_E_PATH	Makefile	/^L_E_PATH			:=	$(addprefix $(L_E_DIR)\/,$(L_E_FILES))$/;"	m
MAGENTA	libft/includes/ft_printf.h	/^# define MAGENTA /;"	d
MOVE_CURSOR	libterm/includes/cursor.h	/^# define MOVE_CURSOR /;"	d
MOVE_UP	libterm/includes/cursor.h	/^# define MOVE_UP /;"	d
NAME	Makefile	/^NAME	:=	21sh$/;"	m
NAME	libft/Makefile	/^NAME	:=	libft.a$/;"	m
NAME	libterm/Makefile	/^NAME	:=	libterm.a$/;"	m
NO_HIGHLIGHT	libterm/includes/cursor.h	/^# define NO_HIGHLIGHT /;"	d
NO_UNDERLINE	libterm/includes/cursor.h	/^# define NO_UNDERLINE /;"	d
NUM_CAPS	libterm/includes/cursor.h	/^# define NUM_CAPS /;"	d
OBJS	Makefile	/^OBJS		:=	$(addprefix $(OBJ_DIR)\/,$(OBJ_FILES))$/;"	m
OBJS	libft/Makefile	/^OBJS		:=	$(addprefix $(OBJ_DIR)\/,$(OBJ_FILES))$/;"	m
OBJS	libterm/Makefile	/^OBJS		:=	$(addprefix $(OBJ_DIR)\/,$(OBJ_FILES))$/;"	m
OBJ_DIR	Makefile	/^OBJ_DIR		:=	objs$/;"	m
OBJ_DIR	libft/Makefile	/^OBJ_DIR		:=	objs$/;"	m
OBJ_DIR	libterm/Makefile	/^OBJ_DIR		:=	objs$/;"	m
OBJ_FILES	Makefile	/^OBJ_FILES	:=	$(C_FILES:.c=.o)$/;"	m
OBJ_FILES	libft/Makefile	/^OBJ_FILES	:=	$(C_FILES:.c=.o)$/;"	m
OBJ_FILES	libterm/Makefile	/^OBJ_FILES	:=	$(C_FILES:.c=.o)$/;"	m
OPT	Makefile	/^OPT		:=	$/;"	m
OPT	libft/Makefile	/^OPT		:=	$/;"	m
OPT	libterm/Makefile	/^OPT		:=	$/;"	m
OP_CHART_SIZE	includes/lexer.h	/^# define OP_CHART_SIZE /;"	d
PARSER_DIR	Makefile	/^	PARSER_DIR			:=	token_parser$/;"	m
PARSER_FILES	Makefile	/^	PARSER_FILES	:=	token_parser.c token_parser_utils.c$/;"	m
PARSER_PATH	Makefile	/^PARSER_PATH			:=	$(addprefix $(PARSER_DIR)\/,$(PARSER_FILES))$/;"	m
PIPELINE_DIR	Makefile	/^	PIPELINE_DIR		:=	pipeline$/;"	m
PIPELINE_FILES	Makefile	/^	PIPELINE_FILES	:=	parse_pipeline.c parse_redirections.c \\$/;"	m
PIPELINE_PATH	Makefile	/^PIPELINE_PATH		:=	$(addprefix $(PIPELINE_DIR)\/,$(PIPELINE_FILES))$/;"	m
PRINT_LINE	libterm/includes/cursor.h	/^# define PRINT_LINE /;"	d
READER_DIR	Makefile	/^	READER_DIR			:=	reader$/;"	m
READER_FILES	Makefile	/^	READER_FILES	:=	arrows.c check_commands.c clean_exit.c prompt.c \\$/;"	m
READER_H	includes/reader.h	/^# define READER_H$/;"	d
READER_PATH	Makefile	/^READER_PATH			:=	$(addprefix $(READER_DIR)\/,$(READER_FILES))$/;"	m
REALLOC_FACTOR	libft/includes/libft.h	/^# define REALLOC_FACTOR /;"	d
RED	libft/includes/ft_printf.h	/^# define RED /;"	d
RESET	libft/includes/ft_printf.h	/^# define RESET /;"	d
RESTORE_CURSOR	libterm/includes/cursor.h	/^# define RESTORE_CURSOR /;"	d
RIGHTARROW	libterm/includes/libterm.h	/^# define RIGHTARROW /;"	d
RTAB	libterm/includes/libterm.h	/^# define RTAB /;"	d
RTAB_LEN	libterm/includes/libterm.h	/^# define RTAB_LEN /;"	d
SAVE_CURSOR	libterm/includes/cursor.h	/^# define SAVE_CURSOR /;"	d
SCRIPT_PATH	libft/Makefile	/^SCRIPT_PATH	:= ..\/script$/;"	m
SCRIPT_PATH	libterm/Makefile	/^SCRIPT_PATH	:= ..\/script$/;"	m
SCROLL_DOWN	libterm/includes/cursor.h	/^# define SCROLL_DOWN /;"	d
SHELL_NAME	includes/tosh.h	/^# define SHELL_NAME /;"	d
SIGNALS_DIR	Makefile	/^	SIGNALS_DIR			:=	signals$/;"	m
SIGNALS_FILES	Makefile	/^	SIGNALS_FILES	:=	signals.c$/;"	m
SIGNALS_PATH	Makefile	/^SIGNALS_PATH		:=	$(addprefix $(SIGNALS_DIR)\/,$(SIGNALS_FILES))$/;"	m
SPACE	libterm/includes/libterm.h	/^# define SPACE /;"	d
SPACE_LEN	libterm/includes/libterm.h	/^# define SPACE_LEN /;"	d
SRCS	Makefile	/^SRCS	:=	$(addprefix $(SRC_DIR)\/,$(ENV_PATH)) \\$/;"	m
SRCS	libft/Makefile	/^SRCS	:=	$(addprefix $(SRC_DIR)\/,$(STD_FUNC_PATH))		\\$/;"	m
SRCS	libterm/Makefile	/^SRCS	:=	$(addprefix $(SRC_DIR)\/,$(ERRORS_PATH))		\\$/;"	m
SRC_DIR	Makefile	/^SRC_DIR	:=	srcs$/;"	m
SRC_DIR	libft/Makefile	/^SRC_DIR	:=	srcs$/;"	m
SRC_DIR	libterm/Makefile	/^SRC_DIR	:=	srcs$/;"	m
SRC_FILES	Makefile	/^SRC_FILES	:=	handle_input.c free.c main.c \\$/;"	m
SRC_FILES	libft/Makefile	/^SRC_FILES	:=	ft_printf.c getters.c isprint_special.c parse_struct.c			\\$/;"	m
SRC_FILES	libterm/Makefile	/^SRC_FILES	:=	cursor.c execute_cap.c print_line.c termcap_settings.c \\$/;"	m
SRC_PATH	Makefile	/^SRC_PATH			:=	$(addprefix $(SRC_DIR)\/,$(SRC_FILES))$/;"	m
SRC_PATH	libft/Makefile	/^SRC_PATH			:=	$(addprefix $(SRC_DIR)\/,$(SRC_FILES))$/;"	m
SRC_PATH	libterm/Makefile	/^SRC_PATH		:=	$(addprefix $(SRC_DIR)\/,$(SRC_FILES))$/;"	m
SRC_SUBDIRS	Makefile	/^	SRC_SUBDIRS	:=	$(ENV_DIR) $(ERRORS_DIR) $(LEXER_DIR) $(PARSER_DIR) \\$/;"	m
SRC_SUBDIRS	libft/Makefile	/^	SRC_SUBDIRS	:=	$(STD_FUNC_DIR) $(CONVERSION_DIR) $(FORMATS_DIR)			\\$/;"	m
SRC_SUBDIRS	libterm/Makefile	/^	SRC_SUBDIRS	:=	$(ERRORS_DIR)$/;"	m
STDERR	libterm/includes/libterm.h	/^# define STDERR /;"	d
STDIN	libterm/includes/libterm.h	/^# define STDIN /;"	d
STDOUT	libterm/includes/libterm.h	/^# define STDOUT /;"	d
STD_FUNC_DIR	libft/Makefile	/^	STD_FUNC_DIR		:= std_func$/;"	m
STD_FUNC_FILES	libft/Makefile	/^	STD_FUNC_FILES		:=	ft_atoi.c ft_bzero.c ft_isalnum.c ft_isalpha.c	\\$/;"	m
STD_FUNC_PATH	libft/Makefile	/^STD_FUNC_PATH		:=	$(addprefix $(STD_FUNC_DIR)\/,$(STD_FUNC_FILES))$/;"	m
STD_PROMPT	includes/line_editing.h	/^# define STD_PROMPT /;"	d
TAB	libterm/includes/libterm.h	/^# define TAB /;"	d
TAB_LEN	libterm/includes/libterm.h	/^# define TAB_LEN /;"	d
TK_42SH	includes/lexer.h	/^	TK_42SH$/;"	e	enum:e_token_type
TK_AMP	includes/lexer.h	/^	TK_AMP,$/;"	e	enum:e_token_type
TK_AND	includes/lexer.h	/^	TK_AND,\/\/=OR$/;"	e	enum:e_token_type
TK_DQ_STR	includes/lexer.h	/^	TK_DQ_STR,$/;"	e	enum:e_token_type
TK_EAT	includes/lexer.h	/^	TK_EAT,$/;"	e	enum:e_token_type
TK_HEREDOC	includes/lexer.h	/^	TK_HEREDOC,$/;"	e	enum:e_token_type
TK_MONOC	includes/lexer.h	/^	TK_MONOC,$/;"	e	enum:e_token_type
TK_OR	includes/lexer.h	/^	TK_OR,\/\/=AND$/;"	e	enum:e_token_type
TK_PIPE	includes/lexer.h	/^	TK_PIPE,$/;"	e	enum:e_token_type
TK_REDIRECTION	includes/lexer.h	/^	TK_REDIRECTION,$/;"	e	enum:e_token_type
TK_SEMI	includes/lexer.h	/^	TK_SEMI,$/;"	e	enum:e_token_type
TK_SQ_STR	includes/lexer.h	/^	TK_SQ_STR,$/;"	e	enum:e_token_type
TK_WORD	includes/lexer.h	/^	TK_WORD,\/\/1$/;"	e	enum:e_token_type
TOSH_H	includes/tosh.h	/^# define TOSH_H$/;"	d
UL	libft/includes/ft_printf.h	/^# define UL /;"	d
ULL	libft/includes/ft_printf.h	/^# define ULL /;"	d
UNDERLINE	libterm/includes/cursor.h	/^# define UNDERLINE /;"	d
UPARROW	libterm/includes/libterm.h	/^# define UPARROW /;"	d
VAL_FLAGS	Makefile	/^VAL_FLAGS	:=	--track-origins=yes --show-leak-kinds=all --track-fds=yes \\$/;"	m
VAL_FLAGS	libft/Makefile	/^VAL_FLAGS	:=	--leak-check=full --track-origins=yes --show-leak-kinds=all		\\$/;"	m
VAL_FLAGS	libterm/Makefile	/^VAL_FLAGS	:=	--leak-check=full --track-origins=yes --show-leak-kinds=all \\$/;"	m
VISIBLE	libterm/includes/cursor.h	/^# define VISIBLE /;"	d
VPATH	Makefile	/^VPATH	:=	$(SRC_DIR) $(addprefix $(SRC_DIR)\/,$(SRC_SUBDIRS))$/;"	m
VPATH	libft/Makefile	/^VPATH	:=	$(SRC_DIR) $(addprefix $(SRC_DIR)\/,$(SRC_SUBDIRS))$/;"	m
VPATH	libterm/Makefile	/^VPATH	:=	$(SRC_DIR) $(addprefix $(SRC_DIR)\/,$(SRC_SUBDIRS))$/;"	m
WHITE	libft/includes/ft_printf.h	/^# define WHITE /;"	d
YELLOW	libft/includes/ft_printf.h	/^# define YELLOW /;"	d
add_env_var	srcs/environment/environ_set.c	/^static void	add_env_var(char *var_name, char *var_value, char ***env)$/;"	f	file:
add_last_node_to_ast	srcs/token_parser/token_parser.c	/^static t_bool	add_last_node_to_ast(t_token **token_head, t_ast **ast_root)$/;"	f	file:
add_node_to_ast	srcs/token_parser/token_parser.c	/^static t_bool	add_node_to_ast(t_token **token_head, t_ast **ast_root)$/;"	f	file:
add_to_cmdlst	srcs/cmd_lst_utils.c	/^int			add_to_cmdlst(char *cmdline, t_cmdlst **cmdlst_head)$/;"	f
add_token_to_list	srcs/lexer/lexer.c	/^static t_bool	add_token_to_list(t_token *current_token, t_token *prev_token$/;"	f	file:
append_st_cmd	srcs/line_editing/st_cmd.c	/^t_st_cmd	*append_st_cmd(t_st_cmd *st_cmd, const char *txt, const char *prompt)$/;"	f
apply_redirections	srcs/pipeline/parse_redirections.c	/^t_bool	apply_redirections(t_token *redir, t_token *prev) \/\/static ?\/\/use redir_table ?$/;"	f
bzero_env	srcs/environment/init_env.c	/^static void	bzero_env(char **env, int size)$/;"	f	file:
c	includes/get_next_line.h	/^	char			*c;$/;"	m	struct:s_fdlist
check_caps	libterm/srcs/termcap_settings.c	/^static int	check_caps(void)$/;"	f	file:
check_conv_value	libft/srcs/conversion/conv_helper.c	/^void			check_conv_value(t_arg *specs, char *value)$/;"	f
check_fd_prev	srcs/pipeline/parse_redirections.c	/^int		check_fd_prev(t_token *prev) \/\/should rename $/;"	f
check_for_arrows	srcs/reader/check_commands.c	/^int		check_for_arrows(t_st_cmd *st_cmd, const char *buf)$/;"	f
check_for_delete	srcs/reader/check_commands.c	/^int		check_for_delete(t_st_cmd *st_cmd, char *buf)$/;"	f
check_for_enter	srcs/reader/check_commands.c	/^int		check_for_enter(const char *buf)$/;"	f
check_for_quit	srcs/reader/check_commands.c	/^int		check_for_quit(const char *buf)$/;"	f
check_for_signal	srcs/reader/check_commands.c	/^int		check_for_signal(const char *buf)$/;"	f
check_if_flags	libft/srcs/getters.c	/^void	check_if_flags(t_arg *specs, char c, char **format, va_list arg)$/;"	f
choose_value	libft/srcs/helpers/choose_value.c	/^LL	choose_value(t_arg *specs, LL value)$/;"	f
clean_exit	srcs/reader/clean_exit.c	/^void	clean_exit(int exitno)$/;"	f
cmd_table	includes/ast.h	/^	char			**cmd_table;$/;"	m	struct:s_simplecmd
col	libterm/includes/cursor.h	/^	int	col;$/;"	m	struct:s_pos
concatenate_strings	srcs/pipeline/execute_commands.c	/^static char	*concatenate_strings(t_token *token)$/;"	f	file:
concatenate_txt	srcs/reader/txt_cat.c	/^char	*concatenate_txt(t_st_cmd *st_cmd)$/;"	f
content	includes/lexer.h	/^	char			*content;$/;"	m	struct:s_token
content	libft/includes/libft.h	/^	void			*content;$/;"	m	struct:s_list
content_size	libft/includes/libft.h	/^	size_t			content_size;$/;"	m	struct:s_list
conv_val	libft/includes/ft_printf.h	/^	char		*conv_val;$/;"	m	struct:s_arg
convert	libft/srcs/conversion/converters.c	/^char	*convert(ULL num, int base, char *rep)$/;"	f
convert_p	libft/srcs/conversion/converters.c	/^char	*convert_p(L num, int base, char *rep)$/;"	f
cpy	includes/history.h	/^	char				*cpy;$/;"	m	struct:s_hist_lst
create_argv	srcs/pipeline/execute_commands.c	/^static char	**create_argv(t_token *token_head, unsigned int argv_len)$/;"	f	file:
create_ast	srcs/token_parser/token_parser.c	/^t_ast	*create_ast(t_token *token_head)$/;"	f
create_ast_node	srcs/token_parser/token_parser_utils.c	/^t_ast	*create_ast_node(t_token *new_token, t_ast *left, t_ast *right)$/;"	f
create_cap_array	libterm/srcs/termcap_settings.c	/^static char	**create_cap_array(void)$/;"	f	file:
create_cmdlst_head	srcs/cmd_lst_utils.c	/^static t_cmdlst	*create_cmdlst_head(char *cmdline)$/;"	f	file:
create_hist_lst	srcs/history/hist_lst.c	/^t_hist_lst	*create_hist_lst(char *line, char keep)$/;"	f
create_minienv	srcs/environment/init_env.c	/^static char	**create_minienv(void)$/;"	f	file:
create_op_chart_elem	srcs/lexer/lexer_op_chart.c	/^static void	create_op_chart_elem(t_operation *op, char *str$/;"	f	file:
create_specs	libft/srcs/spec_init.c	/^t_arg	*create_specs(t_arg *specs)$/;"	f
create_token	srcs/lexer/lexer.c	/^t_token	*create_token(char *cmdline, size_t size, t_token_type type)$/;"	f
data_len	libft/includes/ft_printf.h	/^	int			data_len;$/;"	m	struct:s_arg
data_size	includes/line_editing.h	/^	size_t					data_size;$/;"	m	struct:s_st_txt
dbl	libft/includes/ft_printf.h	/^	int			dbl;$/;"	m	struct:s_arg
delete_left	srcs/reader/delete.c	/^void		delete_left(t_st_cmd *st_cmd)$/;"	f
delete_right	srcs/reader/delete.c	/^void		delete_right(t_st_cmd *st_cmd)$/;"	f
e_token_type	includes/lexer.h	/^typedef enum		e_token_type$/;"	g
err_caps	libterm/srcs/errors/error_caps.c	/^int		err_caps(void)$/;"	f
err_getattr	libterm/srcs/errors/error_attr.c	/^int		err_getattr(void)$/;"	f
err_no_database	libterm/srcs/errors/error_tgetent.c	/^int		err_no_database(void)$/;"	f
err_no_env	libterm/srcs/errors/error_getenv.c	/^int		err_no_env(void)$/;"	f
err_no_str	libterm/srcs/errors/error_getstr.c	/^int		err_no_str(char *cap)$/;"	f
err_noentry	libterm/srcs/errors/error_tgetent.c	/^int		err_noentry(void)$/;"	f
err_not_terminal	libterm/srcs/errors/error_isatty.c	/^int		err_not_terminal(void)$/;"	f
err_resetattr	libterm/srcs/errors/error_attr.c	/^int		err_resetattr(void)$/;"	f
err_setattr	libterm/srcs/errors/error_attr.c	/^int		err_setattr(void)$/;"	f
err_tgoto	libterm/srcs/errors/error_tgoto.c	/^int		err_tgoto(char *cap)$/;"	f
error_mem	srcs/errors/errors.c	/^void	error_mem(void)$/;"	f
exec_ast	srcs/token_parser/token_parser_utils.c	/^t_bool	exec_ast(t_ast *root, char **env)$/;"	f
execute_argv	srcs/pipeline/execute_commands.c	/^t_bool		execute_argv(char	**argv)$/;"	f
execute_str	libterm/srcs/execute_cap.c	/^int		execute_str(char *cap)$/;"	f
execute_tokens	srcs/pipeline/execute_commands.c	/^t_bool		execute_tokens(t_token *token_head)$/;"	f
expand_dollars	srcs/expands/parse_dollars.c	/^static t_bool	expand_dollars(t_token *token, char **env)$/;"	f	file:
expand_dquotes	srcs/expands/parse_quotes.c	/^static t_bool	expand_dquotes(t_token	*token_head)$/;"	f	file:
expand_squotes	srcs/expands/parse_quotes.c	/^static t_bool	expand_squotes(t_token *token_head)$/;"	f	file:
extra	libft/includes/ft_printf.h	/^	int			extra;$/;"	m	struct:s_arg
fd	includes/get_next_line.h	/^	int				fd;$/;"	m	struct:s_fdlist
fill	libft/includes/ft_printf.h	/^	char		fill;$/;"	m	struct:s_arg
fill_char	libft/srcs/formats/format_char.c	/^void	fill_char(int perc_len, t_arg *specs, char *value)$/;"	f
fill_char_left	libft/srcs/formats/format_char.c	/^void	fill_char_left(int perc_len, t_arg *specs, char *value)$/;"	f
fill_int	libft/srcs/formats/format_int.c	/^static void			fill_int(int perc_len, t_arg *specs, LL value)$/;"	f	file:
fill_int_left	libft/srcs/formats/format_int.c	/^static void			fill_int_left(int perc_len, t_arg *specs, LL value)$/;"	f	file:
fill_itoa	libft/srcs/std_func/ft_itoa.c	/^static void	fill_itoa(int n, char *src, int len)$/;"	f	file:
fill_len	libft/includes/ft_printf.h	/^	int			fill_len;$/;"	m	struct:s_arg
fill_op_chart	srcs/lexer/lexer_op_chart.c	/^static void	fill_op_chart(t_operation *op_chart)$/;"	f	file:
fill_string	libft/srcs/formats/format_conv.c	/^static void		fill_string(t_arg *specs, char *value)$/;"	f	file:
fill_string	libft/srcs/formats/format_p.c	/^static void		fill_string(t_arg *specs, L value)$/;"	f	file:
fill_string	libft/srcs/formats/format_string.c	/^static void	fill_string(t_arg *specs, char *value)$/;"	f	file:
fill_string_left	libft/srcs/formats/format_conv.c	/^static void		fill_string_left(t_arg *specs, char *value)$/;"	f	file:
fill_string_left	libft/srcs/formats/format_p.c	/^static void		fill_string_left(t_arg *specs, L value)$/;"	f	file:
fill_string_left	libft/srcs/formats/format_string.c	/^static void	fill_string_left(t_arg *specs, char *value)$/;"	f	file:
fill_uint	libft/srcs/formats/format_unsigned.c	/^static void	fill_uint(int perc_len, t_arg *specs, ULL value)$/;"	f	file:
fill_uint_left	libft/srcs/formats/format_unsigned.c	/^static void	fill_uint_left(int perc_len, t_arg *specs, ULL value)$/;"	f	file:
find_next_ctrl_op	srcs/token_parser/token_parser.c	/^static t_bool	find_next_ctrl_op(t_token **token_probe, t_token **token_prev)$/;"	f	file:
float_to_string	libft/srcs/formats/format_float.c	/^static void	float_to_string(t_arg *specs, double f)$/;"	f	file:
fork_pipes	srcs/pipeline/parse_pipeline.c	/^static int	fork_pipes(int num_simple_commands, t_token *begin, char **env)$/;"	f	file:
format_char	libft/srcs/formats/format_char.c	/^void	format_char(t_arg *specs, char value)$/;"	f
format_conv	libft/srcs/formats/format_conv.c	/^void			format_conv(t_arg *specs, LL value)$/;"	f
format_float	libft/srcs/formats/format_float.c	/^void		format_float(t_arg *specs, va_list arg)$/;"	f
format_int	libft/srcs/formats/format_int.c	/^void				format_int(t_arg *specs, LL value)$/;"	f
format_p	libft/srcs/formats/format_p.c	/^void			format_p(t_arg *specs, L value)$/;"	f
format_string	libft/srcs/formats/format_string.c	/^void		format_string(t_arg *specs, char *value)$/;"	f
format_unsigned	libft/srcs/formats/format_unsigned.c	/^void		format_unsigned(t_arg *specs, ULL value)$/;"	f
free_ast	srcs/free.c	/^void	free_ast(t_ast *ast_root)$/;"	f
free_ast_node	srcs/free.c	/^static void	free_ast_node(t_ast *node)$/;"	f	file:
free_token_list	srcs/free.c	/^void	free_token_list(t_token *token_head)$/;"	f
front_back_split	libft/srcs/std_func/ft_lstsort.c	/^static void		front_back_split(t_list *src, t_list **fref, t_list **bref)$/;"	f	file:
ft_atoi	libft/srcs/std_func/ft_atoi.c	/^int		ft_atoi(const char *str)$/;"	f
ft_atoi_move	libft/srcs/helpers/ft_atoi_move.c	/^int		ft_atoi_move(char **str)$/;"	f
ft_bzero	libft/srcs/std_func/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_dlistnew	srcs/history/get_next_line.c	/^static t_fdlist	*ft_dlistnew(int fd)$/;"	f	file:
ft_dprintf	libft/srcs/ft_printf.c	/^int				ft_dprintf(int fd, const char *format, ...)$/;"	f
ft_dup_ntab	libft/srcs/std_func/ft_dup_ntab.c	/^char	**ft_dup_ntab(const char **tab)$/;"	f
ft_free_ntab	libft/srcs/std_func/ft_free_ntab.c	/^void	ft_free_ntab(char **tab)$/;"	f
ft_hhitoa	libft/srcs/ft_itoa/ft_hhitoa.c	/^void			ft_hhitoa(t_arg *specs, signed char n)$/;"	f
ft_hitoa	libft/srcs/ft_itoa/ft_hitoa.c	/^void			ft_hitoa(t_arg *specs, short int n)$/;"	f
ft_isalnum	libft/srcs/std_func/ft_isalnum.c	/^int		ft_isalnum(int c)$/;"	f
ft_isalpha	libft/srcs/std_func/ft_isalpha.c	/^int		ft_isalpha(int c)$/;"	f
ft_isascii	libft/srcs/std_func/ft_isascii.c	/^int		ft_isascii(int c)$/;"	f
ft_isdigit	libft/srcs/std_func/ft_isdigit.c	/^int		ft_isdigit(int c)$/;"	f
ft_isprint	libft/srcs/std_func/ft_isprint.c	/^int		ft_isprint(int c)$/;"	f
ft_itoa	libft/srcs/std_func/ft_itoa.c	/^char		*ft_itoa(int n)$/;"	f
ft_itoa_spec	libft/srcs/parse_struct.c	/^void	ft_itoa_spec(t_arg *specs, LL value)$/;"	f
ft_litoa	libft/srcs/ft_itoa/ft_litoa.c	/^void			ft_litoa(t_arg *specs, L n)$/;"	f
ft_llitoa	libft/srcs/ft_itoa/ft_llitoa.c	/^void			ft_llitoa(t_arg *specs, LL n)$/;"	f
ft_lstadd	libft/srcs/std_func/ft_lstadd.c	/^void	ft_lstadd(t_list **alst, t_list *new)$/;"	f
ft_lstappend	libft/srcs/std_func/ft_lstappend.c	/^void	ft_lstappend(t_list **lst, t_list *new)$/;"	f
ft_lstdel	libft/srcs/std_func/ft_lstdel.c	/^void	ft_lstdel(t_list **alst, void (*del)(void *, size_t))$/;"	f
ft_lstdelone	libft/srcs/std_func/ft_lstdelone.c	/^void	ft_lstdelone(t_list **alst, void (*del)(void *, size_t))$/;"	f
ft_lstiter	libft/srcs/std_func/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(t_list *elem))$/;"	f
ft_lstlen	libft/srcs/std_func/ft_lstlen.c	/^size_t	ft_lstlen(t_list **head)$/;"	f
ft_lstmap	libft/srcs/std_func/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, t_list *(*f)(t_list *elem))$/;"	f
ft_lstnew	libft/srcs/std_func/ft_lstnew.c	/^t_list	*ft_lstnew(void const *content, size_t content_size)$/;"	f
ft_lstrmdup	libft/srcs/std_func/ft_lstrmdup.c	/^void			ft_lstrmdup(t_list *lst)$/;"	f
ft_lstsort	libft/srcs/std_func/ft_lstsort.c	/^void			ft_lstsort(t_list **head)$/;"	f
ft_memalloc	libft/srcs/std_func/ft_memalloc.c	/^void	*ft_memalloc(size_t size)$/;"	f
ft_memccpy	libft/srcs/std_func/ft_memccpy.c	/^void	*ft_memccpy(void *restrict d, const void *restrict s, int c, size_t n)$/;"	f
ft_memchr	libft/srcs/std_func/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/srcs/std_func/ft_memcmp.c	/^int		ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/srcs/std_func/ft_memcpy.c	/^void	*ft_memcpy(void *restrict dst, const void *restrict src, size_t n)$/;"	f
ft_memdel	libft/srcs/std_func/ft_memdel.c	/^void	ft_memdel(void **ap)$/;"	f
ft_memmove	libft/srcs/std_func/ft_memmove.c	/^void	*ft_memmove(void *s1, const void *s2, size_t n)$/;"	f
ft_memset	libft/srcs/std_func/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_nitoa	libft/srcs/ft_itoa/ft_nitoa.c	/^void			ft_nitoa(t_arg *specs, int n)$/;"	f
ft_ntab_len	libft/srcs/std_func/ft_ntab_len.c	/^int	ft_ntab_len(const char **tab)$/;"	f
ft_printable_len	srcs/reader/input_utils.c	/^size_t	ft_printable_len(const char *s1)$/;"	f
ft_printf	libft/srcs/ft_printf.c	/^int				ft_printf(const char *format, ...)$/;"	f
ft_putchar	libft/srcs/std_func/ft_putchar.c	/^int		ft_putchar(int c)$/;"	f
ft_putchar_err	libft/srcs/std_func/ft_putchar_err.c	/^int		ft_putchar_err(int c)$/;"	f
ft_putchar_fd	libft/srcs/std_func/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl	libft/srcs/std_func/ft_putendl.c	/^void	ft_putendl(char const *str)$/;"	f
ft_putendl_fd	libft/srcs/std_func/ft_putendl_fd.c	/^void	ft_putendl_fd(char const *s, int fd)$/;"	f
ft_putnbr	libft/srcs/std_func/ft_putnbr.c	/^void	ft_putnbr(int nb)$/;"	f
ft_putnbr_fd	libft/srcs/std_func/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr	libft/srcs/std_func/ft_putstr.c	/^void	ft_putstr(char const *str)$/;"	f
ft_putstr_fd	libft/srcs/std_func/ft_putstr_fd.c	/^void	ft_putstr_fd(char const *s, int fd)$/;"	f
ft_realloc	libft/srcs/std_func/ft_realloc.c	/^char	*ft_realloc(char *data, size_t current_data_size,$/;"	f
ft_special_memset	libft/srcs/helpers/ft_special_memset.c	/^void	ft_special_memset(t_arg *specs, char c, int len)$/;"	f
ft_strcat	libft/srcs/std_func/ft_strcat.c	/^char	*ft_strcat(char *restrict s1, const char *restrict s2)$/;"	f
ft_strchr	libft/srcs/std_func/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strclr	libft/srcs/std_func/ft_strclr.c	/^void	ft_strclr(char *s)$/;"	f
ft_strcmp	libft/srcs/std_func/ft_strcmp.c	/^int		ft_strcmp(const char *s1, const char *s2)$/;"	f
ft_strcmp_before_c	srcs/environment/environ_utils.c	/^int		ft_strcmp_before_c(char *search, char *str, char c)\/\/libft ?$/;"	f
ft_strcpy	libft/srcs/std_func/ft_strcpy.c	/^char	*ft_strcpy(char *dst, const char *src)$/;"	f
ft_strdel	libft/srcs/std_func/ft_strdel.c	/^void	ft_strdel(char **as)$/;"	f
ft_strdup	libft/srcs/std_func/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_strdup_print	srcs/reader/input_utils.c	/^char	*ft_strdup_print(const char *s1)$/;"	f
ft_strequ	libft/srcs/std_func/ft_strequ.c	/^int	ft_strequ(char const *s1, char const *s2)$/;"	f
ft_striter	libft/srcs/std_func/ft_striter.c	/^void	ft_striter(char *s, void (*f)(char *s))$/;"	f
ft_striteri	libft/srcs/std_func/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char *))$/;"	f
ft_strjoin	libft/srcs/std_func/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strjoin_free	srcs/pipeline/execute_commands.c	/^static char	*ft_strjoin_free(char *s1, char *s2)$/;"	f	file:
ft_strjoinfree	srcs/history/get_next_line.c	/^static char		*ft_strjoinfree(char *s1, char *s2)$/;"	f	file:
ft_strlcat	libft/srcs/std_func/ft_strlcat.c	/^size_t	ft_strlcat(char *restrict dst, const char *restrict src, size_t size)$/;"	f
ft_strlen	libft/srcs/std_func/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strmap	libft/srcs/std_func/ft_strmap.c	/^char	*ft_strmap(char const *s, char (*f)(char))$/;"	f
ft_strmapi	libft/srcs/std_func/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncat	libft/srcs/std_func/ft_strncat.c	/^char	*ft_strncat(char *restrict s1, const char *restrict s2, size_t n)$/;"	f
ft_strncat_move	libft/srcs/helpers/ft_strncat_move.c	/^void	ft_strncat_move(char *src, int n, t_arg *specs)$/;"	f
ft_strncmp	libft/srcs/std_func/ft_strncmp.c	/^int		ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strncpy	libft/srcs/std_func/ft_strncpy.c	/^char	*ft_strncpy(char *dst, const char *src, size_t len)$/;"	f
ft_strndup	libft/srcs/std_func/ft_strndup.c	/^char		*ft_strndup(const char *s1, size_t n)$/;"	f
ft_strnequ	libft/srcs/std_func/ft_strnequ.c	/^int		ft_strnequ(char const *s1, char const *s2, size_t n)$/;"	f
ft_strnew	libft/srcs/std_func/ft_strnew.c	/^char		*ft_strnew(size_t size)$/;"	f
ft_strnstr	libft/srcs/std_func/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f
ft_strrchr	libft/srcs/std_func/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strrev	libft/srcs/std_func/ft_strrev.c	/^char	*ft_strrev(const char *s)$/;"	f
ft_strsplit	libft/srcs/std_func/ft_strsplit.c	/^char			**ft_strsplit(char const *s, char *c)$/;"	f
ft_strstr	libft/srcs/std_func/ft_strstr.c	/^char	*ft_strstr(const char *haystack, const char *needle)$/;"	f
ft_strsub	libft/srcs/std_func/ft_strsub.c	/^char	*ft_strsub(char const *s, unsigned int start, size_t len)$/;"	f
ft_strtrim	libft/srcs/std_func/ft_strtrim.c	/^char				*ft_strtrim(char const *s)$/;"	f
ft_tolower	libft/srcs/std_func/ft_tolower.c	/^int		ft_tolower(int c)$/;"	f
ft_toupper	libft/srcs/std_func/ft_toupper.c	/^int		ft_toupper(int c)$/;"	f
ft_uitoa	libft/srcs/ft_itoa/ft_uitoa.c	/^void		ft_uitoa(t_arg *specs, unsigned long long n)$/;"	f
ft_uitoa_spec	libft/srcs/helpers/unsigned_helper.c	/^void	ft_uitoa_spec(t_arg *specs, ULL value)$/;"	f
ft_vdprintf	libft/srcs/ft_printf.c	/^int				ft_vdprintf(int fd, const char *restrict f, va_list ap)$/;"	f
ft_vprintf	libft/srcs/ft_printf.c	/^int				ft_vprintf(const char *format, va_list ap)$/;"	f
g_saved_attr	libterm/includes/libterm.h	/^struct termios	g_saved_attr;$/;"	v	typeref:struct:termios
g_tty	libterm/includes/libterm.h	/^int				g_tty;$/;"	v
get_begin_lst	srcs/history/hist_lst.c	/^t_hist_lst	*get_begin_lst(t_hist_lst *hist_lst)$/;"	f
get_dquot_token	srcs/lexer/get_token.c	/^static t_token	*get_dquot_token(char **cmdline)$/;"	f	file:
get_eat_token	srcs/lexer/get_token.c	/^static t_token	*get_eat_token(char **cmdline)$/;"	f	file:
get_end_lst	srcs/history/hist_lst.c	/^t_hist_lst	*get_end_lst(t_hist_lst *hist_lst)$/;"	f
get_envline	srcs/environment/environ_utils.c	/^char	*get_envline(char *search, char **env)$/;"	f
get_envline_index	srcs/environment/environ_utils.c	/^int		get_envline_index(char *search, char **env)$/;"	f
get_envline_value	srcs/environment/environ_utils.c	/^char	*get_envline_value(char *search, char **env)$/;"	f
get_first_st_cmd	srcs/line_editing/st_cmd.c	/^t_st_cmd	*get_first_st_cmd(t_st_cmd *st_cmd)$/;"	f
get_flags	libft/srcs/getters.c	/^int		get_flags(t_arg *specs, char **format, va_list arg)$/;"	f
get_hhlen	libft/srcs/get_len/get_len.c	/^int		get_hhlen(signed char value)$/;"	f
get_history	srcs/history/hist_file.c	/^t_hist_lst	*get_history(const char **env)$/;"	f
get_hlen	libft/srcs/get_len/get_len.c	/^int		get_hlen(short int value)$/;"	f
get_keep	srcs/handle_input.c	/^t_hist_lst	*get_keep(t_hist_lst *hist_lst)$/;"	f
get_len	libft/srcs/get_len/get_len.c	/^int		get_len(int value)$/;"	f
get_lh	libft/srcs/getters.c	/^void	get_lh(char **format, t_arg *specs)$/;"	f
get_llen	libft/srcs/get_len/get_len.c	/^int		get_llen(L value)$/;"	f
get_lllen	libft/srcs/get_len/get_len.c	/^int		get_lllen(LL value)$/;"	f
get_monochar	srcs/lexer/get_token.c	/^static t_token	*get_monochar(char **cmdline)$/;"	f	file:
get_my_len	libft/srcs/std_func/ft_itoa.c	/^static int	get_my_len(int n)$/;"	f	file:
get_new_len	srcs/expands/parse_quotes.c	/^static size_t	get_new_len(char *str, size_t old_len)$/;"	f	file:
get_next_history	srcs/history/switch_history.c	/^void	get_next_history(t_st_cmd *st_cmd)$/;"	f
get_next_line	srcs/history/get_next_line.c	/^int				get_next_line(const int fd, char **line)$/;"	f
get_next_simple_command	srcs/pipeline/parse_pipeline.c	/^static t_token *get_next_simple_command(t_token *begin)$/;"	f	file:
get_op_chart	srcs/lexer/lexer_op_chart.c	/^t_operation	*get_op_chart(void)$/;"	f
get_op_chart_token	srcs/lexer/lexer_op_chart.c	/^t_token		*get_op_chart_token(char **cmdline, t_operation *op_chart)$/;"	f
get_pos	libterm/srcs/cursor.c	/^static void	get_pos(char *pos_str)$/;"	f	file:
get_pos	srcs/reader/arrows.c	/^void	get_pos(t_st_cmd *st_cmd, size_t tracker)$/;"	f
get_previous_history	srcs/history/switch_history.c	/^void	get_previous_history(t_st_cmd *st_cmd)$/;"	f
get_regular_token	srcs/lexer/get_token.c	/^static t_token	*get_regular_token(char **cmdline)$/;"	f	file:
get_squot_token	srcs/lexer/get_token.c	/^static t_token	*get_squot_token(char **cmdline)$/;"	f	file:
get_st_cmd	srcs/line_editing/st_cmd.c	/^t_st_cmd	*get_st_cmd(t_st_cmd **new_struct)$/;"	f
get_token	srcs/lexer/get_token.c	/^t_token			*get_token(char **cmdline, t_operation *op_chart)$/;"	f
get_ulen	libft/srcs/get_len/get_ulen.c	/^int		get_ulen(unsigned int value)$/;"	f
get_ullen	libft/srcs/get_len/get_ulen.c	/^int		get_ullen(UL value)$/;"	f
get_ulllen	libft/srcs/get_len/get_ulen.c	/^int		get_ulllen(ULL value)$/;"	f
get_var_name	srcs/expands/parse_dollars.c	/^static char		*get_var_name(char *str)$/;"	f	file:
getfd	srcs/history/get_next_line.c	/^static t_fdlist	*getfd(t_fdlist *save, int fd)$/;"	f	file:
go_back_to_start	srcs/line_editing/writing.c	/^void	go_back_to_start(t_st_cmd *st_cmd)$/;"	f
go_to_end	srcs/reader/arrows.c	/^void	go_to_end(t_st_cmd *st_cmd)$/;"	f
go_to_start	srcs/reader/arrows.c	/^void	go_to_start(t_st_cmd *st_cmd)$/;"	f
h	libft/includes/ft_printf.h	/^	int			h;$/;"	m	struct:s_arg
h_min	libft/srcs/ft_itoa/ft_hitoa.c	/^static void		h_min(t_arg *specs)$/;"	f	file:
handle_input	srcs/handle_input.c	/^t_bool	handle_input(t_st_cmd *st_cmd, char **env)$/;"	f
handle_perc	libft/srcs/parse_struct.c	/^int		handle_perc(char **format, t_arg *specs, va_list arg)$/;"	f
hash	libft/includes/ft_printf.h	/^	int			hash;$/;"	m	struct:s_arg
hh_min	libft/srcs/ft_itoa/ft_hhitoa.c	/^static void		hh_min(t_arg *specs)$/;"	f	file:
hist_lst	includes/line_editing.h	/^	struct s_hist_lst		*hist_lst;$/;"	m	struct:s_st_cmd	typeref:struct:s_st_cmd::s_hist_lst
how_long	libft/srcs/std_func/ft_strsplit.c	/^static	size_t	how_long(char const *s, char *c, size_t *j)$/;"	f	file:
how_many	libft/srcs/std_func/ft_strsplit.c	/^static size_t	how_many(char const *s, char *c)$/;"	f	file:
i_min	libft/srcs/ft_itoa/ft_nitoa.c	/^static void		i_min(t_arg *specs)$/;"	f	file:
increm_format	libft/srcs/incrementers/increm_format.c	/^void	increm_format(char **s1, int len)$/;"	f
increm_string	libft/srcs/incrementers/increm_string.c	/^void	increm_string(t_arg *specs, int len)$/;"	f
init_env	srcs/environment/init_env.c	/^char		**init_env(const char **env)$/;"	f
init_lexer	srcs/lexer/lexer.c	/^static void	init_lexer(t_operation **op_chart, t_token **token_head$/;"	f	file:
init_relative_pos	srcs/line_editing/st_cmd.c	/^void		init_relative_pos(t_st_cmd *st_cmd)$/;"	f
init_specs	libft/srcs/spec_init.c	/^void	init_specs(t_arg *specs)$/;"	f
init_st_cmd	srcs/line_editing/st_cmd.c	/^t_st_cmd	*init_st_cmd(const char **env)$/;"	f
init_st_prompt	srcs/line_editing/st_prompt.c	/^t_st_prompt	*init_st_prompt(const char *prompt)$/;"	f
init_st_txt	srcs/line_editing/st_txt.c	/^t_st_txt	*init_st_txt(const char *txt)$/;"	f
input_loop	srcs/reader/input_loop.c	/^int		input_loop(t_st_cmd *st_cmd)$/;"	f
insert_ast_node	srcs/token_parser/token_parser.c	/^static t_bool	insert_ast_node(t_ast *new_ast_node, t_ast **ast_root)$/;"	f	file:
insert_left	srcs/handle_input.c	/^t_hist_lst		*insert_left(t_hist_lst *hist_lst, char *line, char keep)$/;"	f
insert_right	srcs/history/hist_lst.c	/^t_hist_lst	*insert_right(t_hist_lst *hist_lst, char *line, char keep)$/;"	f
insert_str	srcs/reader/input_utils.c	/^void	insert_str(t_st_cmd *st_cmd, const char *buf,$/;"	f
insert_txt	srcs/reader/input_loop.c	/^void	insert_txt(t_st_cmd *st_cmd, const char *buf)$/;"	f
is_argv_token	srcs/pipeline/check_token_type.c	/^t_bool		is_argv_token(t_token *probe)$/;"	f
is_ctrl_op_token	srcs/token_parser/token_parser_utils.c	/^t_bool	is_ctrl_op_token(t_token *token)$/;"	f
is_env_var_name_char	srcs/expands/parse_dollars.c	/^static t_bool	is_env_var_name_char(char c)$/;"	f	file:
is_full_of_whitespaces	srcs/main.c	/^t_bool	is_full_of_whitespaces(char *input)$/;"	f
is_in	libft/srcs/std_func/ft_strsplit.c	/^static int		is_in(char h, char *str)$/;"	f	file:
is_logic_or_pipe	srcs/lexer/lexer_tools.c	/^t_bool	is_logic_or_pipe(t_token *token)$/;"	f
is_metachar	srcs/lexer/lexer_tools.c	/^t_bool	is_metachar(char c)$/;"	f
is_parenth	srcs/lexer/lexer_tools.c	/^t_bool	is_parenth(char c)$/;"	f
is_quote_token	srcs/pipeline/check_token_type.c	/^t_bool	is_quote_token(t_token *token)$/;"	f
is_quotes	srcs/lexer/lexer_tools.c	/^t_bool	is_quotes(char c)$/;"	f
is_redir_token	srcs/lexer/lexer_tools.c	/^t_bool	is_redir_token(t_token *token)$/;"	f
is_simple_cmd_token	srcs/pipeline/check_token_type.c	/^t_bool	is_simple_cmd_token(t_token *probe) \/\/static ?$/;"	f
is_spec_upper	libft/srcs/getters.c	/^int		is_spec_upper(char c)$/;"	f
is_tklst_full_eat	srcs/token_parser/token_parser_utils.c	/^t_bool	is_tklst_full_eat(t_token *token_head)$/;"	f
is_two_ctrlop_or_redir_following	srcs/lexer/lexer_tools.c	/^t_bool	is_two_ctrlop_or_redir_following(t_token *prev_token, t_token *current_token)$/;"	f
is_type	libft/srcs/getters.c	/^int		is_type(char **format, t_arg *specs)$/;"	f
is_valid_dquotes_escape	srcs/expands/parse_quotes.c	/^static t_bool	is_valid_dquotes_escape(char c)$/;"	f	file:
is_valid_tilde	srcs/expands/parse_tildes.c	/^static t_bool	is_valid_tilde(t_token *curr_token, t_token *prev_token)$/;"	f	file:
is_valid_type	libft/srcs/helpers/utils.c	/^int		is_valid_type(char c)$/;"	f
is_white_spaces	srcs/lexer/lexer_tools.c	/^t_bool	is_white_spaces(char c)$/;"	f
isprint_special	libft/srcs/isprint_special.c	/^int		isprint_special(char c)$/;"	f
keep	includes/history.h	/^	char				keep;$/;"	m	struct:s_hist_lst
l	libft/includes/ft_printf.h	/^	int			l;$/;"	m	struct:s_arg
l_min	libft/srcs/ft_itoa/ft_litoa.c	/^static void		l_min(t_arg *specs)$/;"	f	file:
ld_to_string	libft/srcs/formats/format_float.c	/^static void	ld_to_string(t_arg *specs, long double f)$/;"	f	file:
left	includes/ast.h	/^	struct s_ast	*left;$/;"	m	struct:s_ast	typeref:struct:s_ast::s_ast
left	libft/includes/ft_printf.h	/^	int			left;$/;"	m	struct:s_arg
lexer	srcs/lexer/lexer.c	/^int		lexer(char *cmdline, t_token **token_head, char **env)$/;"	f
ll_min	libft/srcs/ft_itoa/ft_llitoa.c	/^static void		ll_min(t_arg *specs)$/;"	f	file:
magic_print	srcs/reader/input_loop.c	/^void	magic_print(char *buf)$/;"	f
main	segv.c	/^int	main(void)$/;"	f
main	srcs/main.c	/^int		main(int argc, char **argv, char **env)$/;"	f
main	test.c	/^int	main(void)$/;"	f
mall_len	libft/includes/ft_printf.h	/^	int			mall_len;$/;"	m	struct:s_arg
malloc_size	includes/line_editing.h	/^	size_t					malloc_size;$/;"	m	struct:s_st_txt
malloc_string	libft/srcs/spec_init.c	/^void	malloc_string(t_arg *specs, int len)$/;"	f
max	libft/srcs/helpers/utils.c	/^int		max(int a, int b)$/;"	f
max_list	libft/srcs/std_func/ft_lstrmdup.c	/^static size_t	max_list(t_list *a, t_list *b)$/;"	f	file:
max_list	libft/srcs/std_func/ft_lstsort.c	/^static	size_t	max_list(t_list *a, t_list *b)$/;"	f	file:
min	libft/srcs/helpers/utils.c	/^int		min(int a, int b)$/;"	f
min_int	libft/srcs/std_func/ft_itoa.c	/^static char	*min_int(char *res)$/;"	f	file:
move_arrow_left	srcs/reader/arrows.c	/^void	move_arrow_left(t_st_cmd *st_cmd)$/;"	f
move_arrow_right	srcs/reader/arrows.c	/^void	move_arrow_right(t_st_cmd *st_cmd)$/;"	f
move_cursor	libterm/srcs/cursor.c	/^int			move_cursor(int col, int row)$/;"	f
move_down	srcs/line_editing/writing.c	/^int		move_down(t_st_cmd *st_cmd)$/;"	f
my_strtrim	srcs/cmd_lst_utils.c	/^char		*my_strtrim(char *str)$/;"	f
next	includes/ast.h	/^	struct s_pipelst	*next;$/;"	m	struct:s_pipelst	typeref:struct:s_pipelst::s_pipelst
next	includes/get_next_line.h	/^	struct s_fdlist	*next;$/;"	m	struct:s_fdlist	typeref:struct:s_fdlist::s_fdlist
next	includes/history.h	/^	struct s_hist_lst *next;$/;"	m	struct:s_hist_lst	typeref:struct:s_hist_lst::s_hist_lst
next	includes/lexer.h	/^	struct s_token	*next;$/;"	m	struct:s_token	typeref:struct:s_token::s_token
next	includes/line_editing.h	/^	struct s_st_cmd			*next;$/;"	m	struct:s_st_cmd	typeref:struct:s_st_cmd::s_st_cmd
next	libft/includes/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
null_data	libft/srcs/helpers/null_data.c	/^int		null_data(t_arg *specs, ULL value)$/;"	f
open_history	srcs/history/hist_file.c	/^static int		open_history(const char **env, int options)$/;"	f	file:
origin	libft/includes/ft_printf.h	/^	char		*origin;$/;"	m	struct:s_arg
ox_helper	libft/srcs/conversion/conv_helper.c	/^static char		*ox_helper(t_arg *specs)$/;"	f	file:
ox_len	libft/srcs/conversion/conv_helper.c	/^int				ox_len(t_arg *specs)$/;"	f
parse_dollars	srcs/expands/parse_dollars.c	/^t_bool			parse_dollars(t_token *token_head, char** env)$/;"	f
parse_expands	srcs/expands/parse_expands.c	/^t_bool		parse_expands(t_token *token_head, int in, int out, char **env)$/;"	f
parse_pipeline	srcs/pipeline/parse_pipeline.c	/^int			parse_pipeline(t_token *token, char **env) \/\/ no need for t_pipelst ?$/;"	f
parse_pos	libterm/srcs/cursor.c	/^static void	parse_pos(char *pos_str, t_pos *curr_pos)$/;"	f	file:
parse_quotes	srcs/expands/parse_quotes.c	/^t_bool	parse_quotes(t_token *token_head)$/;"	f
parse_redirections	srcs/pipeline/parse_redirections.c	/^t_bool	parse_redirections(t_token *token_head)$/;"	f
parse_struct	libft/srcs/parse_struct.c	/^int		parse_struct(t_arg *specs, va_list arg)$/;"	f
parse_tildes	srcs/expands/parse_tildes.c	/^t_bool	parse_tildes(t_token *token_head, const char **env)$/;"	f
plus	libft/includes/ft_printf.h	/^	int			plus;$/;"	m	struct:s_arg
precision	libft/includes/ft_printf.h	/^	int			precision;$/;"	m	struct:s_arg
precision_len	libft/includes/ft_printf.h	/^	int			precision_len;$/;"	m	struct:s_arg
prev	includes/get_next_line.h	/^	struct s_fdlist *prev;$/;"	m	struct:s_fdlist	typeref:struct:s_fdlist::s_fdlist
prev	includes/history.h	/^	struct s_hist_lst *prev;$/;"	m	struct:s_hist_lst	typeref:struct:s_hist_lst::s_hist_lst
prev	includes/line_editing.h	/^	struct s_st_cmd			*prev;$/;"	m	struct:s_st_cmd	typeref:struct:s_st_cmd::s_st_cmd
print_ast	srcs/token_parser/token_parser_utils.c	/^void	print_ast(t_ast *root)$/;"	f
print_cmdlst	srcs/cmd_lst_utils.c	/^void		print_cmdlst(t_cmdlst *head)\/\/for debug$/;"	f
print_hist_lst	srcs/history/hist_lst.c	/^void		print_hist_lst(t_hist_lst *hist_lst)$/;"	f
print_line	libterm/srcs/print_line.c	/^int		print_line(void)$/;"	f
print_op_table	srcs/lexer/lexer_op_chart.c	/^void		print_op_table(t_operation *op_chart)\/\/for debug$/;"	f
print_perc	libft/srcs/parse_struct.c	/^int		print_perc(t_arg *specs, char c)$/;"	f
print_prompt	srcs/reader/prompt.c	/^void	print_prompt(t_st_prompt *st_prompt)$/;"	f
print_token	srcs/lexer/lexer_debug.c	/^void	print_token(t_token *token)\/\/debug$/;"	f
print_token_list	srcs/lexer/lexer_debug.c	/^void	print_token_list(t_token *token_head)\/\/debug$/;"	f
prompt	includes/line_editing.h	/^	char					*prompt;$/;"	m	struct:s_st_prompt
put_ox	libft/srcs/conversion/conv_helper.c	/^void			put_ox(t_arg *specs, char *value, int *perc_len, int modif)$/;"	f
realloc_if_necessary	libft/srcs/spec_init.c	/^void	realloc_if_necessary(t_arg *specs, int len)$/;"	f
redir_dgreat	srcs/pipeline/redir_dgreat.c	/^t_bool		redir_dgreat(t_token *redir, t_token *prev)$/;"	f
redir_dless	srcs/pipeline/redir_dless.c	/^t_bool		redir_dless(t_token *redir, t_token *prev)$/;"	f
redir_great	srcs/pipeline/redir_great.c	/^t_bool		redir_great(t_token *redir, t_token *prev)$/;"	f
redir_less	srcs/pipeline/redir_less.c	/^t_bool		redir_less(t_token *redir, t_token *prev)$/;"	f
redir_table	includes/ast.h	/^	int				redir_table[4];$/;"	m	struct:s_simplecmd
redirect	srcs/pipeline/parse_redirections.c	/^void	redirect(int old_fd, int new_fd)$/;"	f
relative_pos	includes/line_editing.h	/^	t_pos					relative_pos;$/;"	m	struct:s_st_cmd
replace_env_var	srcs/environment/environ_set.c	/^static void	replace_env_var(char *var_name, char *var_value, char **env_line)$/;"	f	file:
replace_tilde	srcs/expands/parse_tildes.c	/^t_bool	replace_tilde(char **str, const char **env)$/;"	f
reposition_cursor	srcs/reader/cursor_position.c	/^void		reposition_cursor(t_st_cmd *st_cmd)$/;"	f
reset_dfl	srcs/signals/signals.c	/^void		reset_dfl(void)$/;"	f
reset_specs	libft/srcs/spec_init.c	/^void	reset_specs(t_arg *specs)$/;"	f
reset_st_cmd	srcs/line_editing/st_cmd.c	/^t_st_cmd	*reset_st_cmd(t_st_cmd *old_st_cmd)$/;"	f
reset_terminal_settings	libterm/srcs/termcap_settings.c	/^int			reset_terminal_settings(void)$/;"	f
retrieve_pos	libterm/srcs/cursor.c	/^void		retrieve_pos(t_pos *curr_pos)$/;"	f
return_val	srcs/history/get_next_line.c	/^static int		return_val(char **line, t_fdlist *save)$/;"	f	file:
right	includes/ast.h	/^	struct s_ast	*right;$/;"	m	struct:s_ast	typeref:struct:s_ast::s_ast
right_trim	libft/srcs/std_func/ft_strtrim.c	/^static	size_t		right_trim(char const *s)$/;"	f	file:
row	libterm/includes/cursor.h	/^	int	row;$/;"	m	struct:s_pos
s_arg	libft/includes/ft_printf.h	/^typedef struct	s_arg$/;"	s
s_ast	includes/ast.h	/^typedef struct		s_ast$/;"	s
s_fdlist	includes/get_next_line.h	/^typedef struct		s_fdlist$/;"	s
s_hist_lst	includes/history.h	/^typedef struct		s_hist_lst {$/;"	s
s_lexer_state	includes/lexer.h	/^typedef enum		s_lexer_state$/;"	g
s_list	libft/includes/libft.h	/^typedef	struct	s_list$/;"	s
s_operation	includes/lexer.h	/^typedef struct		s_operation$/;"	s
s_pipelst	includes/ast.h	/^typedef struct		s_pipelst$/;"	s
s_pos	libterm/includes/cursor.h	/^typedef struct	s_pos {$/;"	s
s_simplecmd	includes/ast.h	/^typedef struct		s_simplecmd$/;"	s
s_st_cmd	includes/line_editing.h	/^typedef struct				s_st_cmd {$/;"	s
s_st_prompt	includes/line_editing.h	/^typedef struct				s_st_prompt {$/;"	s
s_st_txt	includes/line_editing.h	/^typedef struct				s_st_txt {$/;"	s
s_token	includes/lexer.h	/^typedef struct		s_token$/;"	s
sanitize_pos_values	libterm/srcs/cursor.c	/^static void	sanitize_pos_values(int *col, int *row)$/;"	f	file:
set_data_len	libft/srcs/set_data_len.c	/^void	set_data_len(t_arg *specs, LL value)$/;"	f
set_env_var	srcs/environment/environ_set.c	/^void		set_env_var(char *var_name, char *var_value, char ***env)$/;"	f
set_extra	libft/srcs/helpers/utils.c	/^void	set_extra(char c, t_arg *specs)$/;"	f
set_float_len	libft/srcs/formats/format_float.c	/^static int	set_float_len(t_arg *specs, double f)$/;"	f	file:
set_i	libft/srcs/helpers/float_helper.c	/^int		set_i(t_arg *specs)$/;"	f
set_ld_len	libft/srcs/formats/format_float.c	/^static int	set_ld_len(t_arg *specs, long double f)$/;"	f	file:
set_non_canonical_mode	libterm/srcs/termcap_settings.c	/^static int	set_non_canonical_mode(struct termios *tattr)$/;"	f	file:
set_shlvl	srcs/environment/shlvl.c	/^void	set_shlvl(char ***env)$/;"	f
setup_terminal_settings	libterm/srcs/termcap_settings.c	/^int			setup_terminal_settings(void)$/;"	f
shift_chars_left	srcs/reader/delete.c	/^void	shift_chars_left(char *str, unsigned int shift_no)$/;"	f
sig_handler	srcs/signals/signals.c	/^static void	sig_handler(int signo)$/;"	f	file:
sigcont_handler	srcs/signals/signals.c	/^static void	sigcont_handler(int signo)$/;"	f	file:
sigint_handler	srcs/signals/signals.c	/^void	sigint_handler(int signo)$/;"	f
sign_len	libft/srcs/formats/format_int.c	/^static char			sign_len(t_arg *specs, LL value)$/;"	f	file:
signal_setup	srcs/signals/signals.c	/^void		signal_setup(void)$/;"	f
sigtstp_handler	srcs/signals/signals.c	/^void		sigtstp_handler(int signo)$/;"	f
sigwinch_handler	srcs/signals/signals.c	/^static void	sigwinch_handler(int signo)$/;"	f	file:
simplecmd	includes/ast.h	/^	t_simplecmd			*simplecmd;$/;"	m	struct:s_pipelst
size	includes/lexer.h	/^	size_t			size;$/;"	m	struct:s_token
size	includes/lexer.h	/^	unsigned char	size;$/;"	m	struct:s_operation
size	includes/line_editing.h	/^	size_t					size;$/;"	m	struct:s_st_prompt
sorted_merge	libft/srcs/std_func/ft_lstsort.c	/^static	t_list	*sorted_merge(t_list *a, t_list *b)$/;"	f	file:
st_prompt	includes/line_editing.h	/^	struct s_st_prompt		*st_prompt;$/;"	m	struct:s_st_cmd	typeref:struct:s_st_cmd::s_st_prompt
st_txt	includes/line_editing.h	/^	struct s_st_txt			*st_txt;$/;"	m	struct:s_st_cmd	typeref:struct:s_st_cmd::s_st_txt
start_pos	includes/line_editing.h	/^	t_pos					start_pos;$/;"	m	struct:s_st_cmd
str	includes/lexer.h	/^	char			str[4];$/;"	m	struct:s_operation
string	libft/includes/ft_printf.h	/^	char		*string;$/;"	m	struct:s_arg
substitute_env_var	srcs/expands/parse_dollars.c	/^static char		*substitute_env_var(char *old_str, size_t *i$/;"	f	file:
switch_st_cmd	srcs/history/switch_history.c	/^static void	switch_st_cmd(t_st_cmd *st_cmd, char *newcmd)$/;"	f	file:
syntax_error_near	srcs/errors/errors.c	/^void	syntax_error_near(t_token *token)$/;"	f
t_arg	libft/includes/ft_printf.h	/^}				t_arg;$/;"	t	typeref:struct:s_arg
t_ast	includes/ast.h	/^}					t_ast;$/;"	t	typeref:struct:s_ast
t_bool	includes/lexer.h	/^typedef unsigned char	t_bool;$/;"	t
t_bool	includes/tosh.h	/^typedef unsigned char	t_bool;$/;"	t
t_fdlist	includes/get_next_line.h	/^}					t_fdlist;$/;"	t	typeref:struct:s_fdlist
t_hist_lst	includes/history.h	/^}					t_hist_lst;$/;"	t	typeref:struct:s_hist_lst
t_lexer_state	includes/lexer.h	/^}					t_lexer_state;$/;"	t	typeref:enum:s_lexer_state
t_list	libft/includes/libft.h	/^}				t_list;$/;"	t	typeref:struct:s_list
t_operation	includes/lexer.h	/^}					t_operation;$/;"	t	typeref:struct:s_operation
t_pipelst	includes/ast.h	/^}					t_pipelst;$/;"	t	typeref:struct:s_pipelst
t_pos	libterm/includes/cursor.h	/^}				t_pos;$/;"	t	typeref:struct:s_pos
t_simplecmd	includes/ast.h	/^}					t_simplecmd;$/;"	t	typeref:struct:s_simplecmd
t_st_cmd	includes/line_editing.h	/^}							t_st_cmd;$/;"	t	typeref:struct:s_st_cmd
t_st_prompt	includes/line_editing.h	/^}							t_st_prompt;$/;"	t	typeref:struct:s_st_prompt
t_st_txt	includes/line_editing.h	/^}							t_st_txt;$/;"	t	typeref:struct:s_st_txt
t_token	includes/lexer.h	/^}					t_token;$/;"	t	typeref:struct:s_token
t_token_type	includes/lexer.h	/^}					t_token_type;$/;"	t	typeref:enum:e_token_type
term_putstr_endline	libterm/srcs/print_line.c	/^void	term_putstr_endline(char *str, int fd)$/;"	f
token	includes/ast.h	/^	t_token			*token;$/;"	m	struct:s_ast
token_list_start_with_ctrl_op	srcs/lexer/lexer_tools.c	/^t_bool	token_list_start_with_ctrl_op(t_token *prev_token, t_token *current_token)$/;"	f
tracker	includes/line_editing.h	/^	size_t					tracker;$/;"	m	struct:s_st_txt
txt	includes/history.h	/^	char				*txt;$/;"	m	struct:s_hist_lst
txt	includes/line_editing.h	/^	char					*txt;$/;"	m	struct:s_st_txt
type	includes/lexer.h	/^	t_token_type	type;$/;"	m	struct:s_operation
type	includes/lexer.h	/^	t_token_type	type;$/;"	m	struct:s_token
type	libft/includes/ft_printf.h	/^	char		type;$/;"	m	struct:s_arg
ulen	libft/srcs/get_len/get_ulen.c	/^int		ulen(t_arg *specs, ULL n)$/;"	f
update_start_pos	srcs/reader/cursor_position.c	/^void		update_start_pos(t_st_cmd *st_cmd) \/\/ might be useless$/;"	f
update_window_struct	srcs/line_editing/st_cmd.c	/^void		update_window_struct(struct winsize *window)$/;"	f
valid_flags	libft/srcs/helpers/utils.c	/^int		valid_flags(char **format)$/;"	f
value_d	libft/srcs/helpers/values.c	/^void	value_d(t_arg *specs, LL value)$/;"	f
value_o	libft/srcs/helpers/values.c	/^void	value_o(t_arg *specs, LL value)$/;"	f
value_u	libft/srcs/helpers/values.c	/^void	value_u(t_arg *specs, ULL value)$/;"	f
value_x	libft/srcs/helpers/values.c	/^void	value_x(t_arg *specs, LL value)$/;"	f
value_xx	libft/srcs/helpers/values.c	/^void	value_xx(t_arg *specs, LL value)$/;"	f
width	libft/includes/ft_printf.h	/^	int			width;$/;"	m	struct:s_arg
width_len	libft/includes/ft_printf.h	/^	int			width_len;$/;"	m	struct:s_arg
wildcard	libft/srcs/wildcard.c	/^void	wildcard(t_arg *specs, va_list arg, int modif)$/;"	f
window	includes/line_editing.h	/^	struct winsize			window;$/;"	m	struct:s_st_cmd	typeref:struct:s_st_cmd::winsize
write_data	libft/srcs/ft_printf.c	/^static	int		write_data(t_arg *specs, int total_len, int fd)$/;"	f	file:
write_from_start	srcs/line_editing/writing.c	/^void	write_from_start(t_st_cmd *st_cmd)$/;"	f
write_line	srcs/line_editing/writing.c	/^int		write_line(t_st_cmd *st_cmd)$/;"	f
write_st_cmd	srcs/line_editing/writing.c	/^void		write_st_cmd(t_st_cmd *st_cmd)$/;"	f
write_to_history	srcs/history/hist_file.c	/^int		write_to_history(t_st_cmd *st_cmd, const char **env)$/;"	f
